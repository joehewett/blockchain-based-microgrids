plugins {
    id 'java-library'
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'org.web3j' version '4.9.0'
    id 'maven-publish'
}

group 'com.contract'
version '1.0.0-SNAPSHOT'

sourceCompatibility = 10

repositories {
    mavenCentral()
    jcenter()
}

def preprocessed_address = "$buildDir/premod/contracts"

web3j {
    // Adding to specific address for processing
    generatedFilesBaseDir = preprocessed_address
    generatedPackageName = 'com.contract.generated.contracts'
    excludedContracts = ['Mortal']
}

dependencies {
    implementation 'org.web3j:core:5.0.0'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}

// =========== HACKY METHOD FOR POST PROCESSING CONTRACTS GENERATED BY WEB3J ================

/*
* Payable methods in solidity contracts are not correctly generated for java
* See: https://github.com/web3j/web3j/issues/1268
* Therefore this task will replace any incorrect method signatures
* Solution is hard coded but easier than opening a PR to Web3j (ticket is 2 years old)
* Also forking and building locally will just add unnecessary complexity at this stage in the project
* */
task fixPayableBug(type: Copy, dependsOn: 'generateContractWrappers') {
    from preprocessed_address
    into "$buildDir/processed/contracts"
    filter {
        String line ->
            line.replaceAll(" public static final String FUNC_BUYENERGY = \"buyEnergy\";",
                    "public static final String FUNC_BUYENERGY = \"buyEnergy\";\n\n" +
                            "public RemoteFunctionCall<TransactionReceipt> buyEnergy(BigInteger buyAmount, BigInteger wei) {\n" +
                            "        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(\n" +
                            "                FUNC_BUYENERGY, \n" +
                            "                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int256(buyAmount)), \n" +
                            "                Collections.<TypeReference<?>>emptyList());\n" +
                            "        return executeRemoteCallTransaction(function, wei);\n" +
                            "    }")
    }
}
fixPayableBug.finalizedBy("overwriteOriginal")

task overwriteOriginal(type: Copy) {
    from "$buildDir/processed/contracts"
    into preprocessed_address
}


// Add bug fix to compile task
compileJava.dependsOn("fixPayableBug")

test {
    useJUnitPlatform()
}

task printJavaHome() {
    println System.getProperty("java.home")
}

